{
  parserClass="by.home.acs.language.parser.ACSParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  extends("ParenthesisedExpression|BinaryExpression|FunctionInvocation|ArrayReferenceExpression|IncrementOrDecrementExpression|NegationExpression|LiteralExpression")=AssignmentExpression
  extends("DefineParenthesesExpression|DefineBinaryExpression|DefineLiteralExpression")=DefineExpression

  psiClassPrefix="ACScript"
  psiImplClassSuffix="Impl"
  psiPackage="by.home.acs.language.psi"
  psiImplPackage="by.home.acs.language.psi.impl"
  elementTypeFactory="by.home.acs.language.psi.ACSElementType.createTypes"
  elementTypeHolderClass="by.home.acs.language.ACSTypes"
  elementTypeClass="by.home.acs.language.psi.ACSElementType"
  tokenTypeClass="by.home.acs.language.psi.ACSTokenType"

  //psiImplUtilClass="by.home.acs.language.util.psi.ACSBnfPsiImplUtil"
  generate=[tokens="yes"]

  tokens = [
    EMPTY_STRING = '""' //MAYBE CHANGE TO SINGLE QUOTES

    //REGEXP TOKENS                    
    WHITE_SPACE = 'regexp:\s+'
    NUMBER='regexp:(0[xX][0-9a-fA-F]+)|(-?[0-9]+)'
    STRING = 'regexp:\"([^\\\"]|\\.)*\"'
    IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'  
    
    //KEYWORDS          
    FUNCTION='function'
    SCRIPT='script'
    SPECIAL = 'special'

    //SCRIPT TYPES
    OPEN = 'OPEN'
    ENTER = 'ENTER'
    RETURN = 'RETURN'
    RESPAWN = 'RESPAWN'
    DEATH = 'DEATH'
    LIGHTNING = 'LIGHNTNING'
    UNLOADING = 'UNLOADING'
    DISCONNECT = 'DISCONNECT'
    KILL = 'KILL'
    REOPEN = 'REOPEN'
    PICKUP = 'PICKUP'
    REDRETURN = 'REDRETURN'
    BLUERETURN = 'BLUERETURN'
    WHITERETURN = 'WHITERETURN'
    NET = 'NET'

    //VARIABLE TYPES
    VOID = 'void'
    INT = 'int'
    STR = 'str'
    BOOl = 'bool'

    //DIRECTIVES
    DEFINE = '#define'
    IMPORT = '#import'
    INCLUDE = '#include'
    LIBRARY = '#library'

    //SYMBOLS
    COMMA = ','
    SEMICOLON = ';'
    COLON = ':'

    //NOT USED RIGHT NOW BECAUSE OF ERROR WITH TOKENS
    //TYPE-CASTS
/*    TYPE_CAST_ARR = 'a'
    TYPE_CAST_BINARY = 'b'
    TYPE_CAST_CHAR = 'c'
    TYPE_CAST_INT = 'i'
    TYPE_CAST_DEC = 'd'
    TYPE_CAST_FIXED_POINT_NUMBER = 'f'
    TYPE_CAST_KEY = 'k'
    TYPE_CAST_LANGUAGE = 'l'
    TYPE_CAST_NAME = 'n'
    TYPE_CAST_STRING = 's'
    TYPE_CAST_HEX = 'h'*/

    //CONTROL FLOW + LOOPS
    DO = 'do'
    WHILE = 'while'
    FOR = 'for'
    UNTIL = 'until'
    IF = 'if'
    ELSE = 'else'
    SWITCH = 'switch'
    CASE = 'case'
    DEFAULT = 'default'
    BREAK = 'break'
    CONTINUE = 'continue'
    
    //SCRIPT STATEMENTS
    TERMINATE = 'terminate'
    SUSPEND = 'suspend'
    RESTART = 'restart'
    
    //MODIFIERS
    STATIC = 'static'
    GLOBAL = 'global'
    WORLD = 'world'
    
    //SYMBOLS
    ASSIGN = '='
    LBRACE = '{'
    RBRACE = '}'
    LPAR = '('
    RPAR = ')'
    LBRACKET = '['
    RBRACKET = ']'

    //OPERATORS:
    //ASSIGNMENT OPERATORS
    MUL_ASSIGN = '*='
    DIV_ASSIGN = '/='
    DIV_MOD_ASSIGN = '%='
    P_ASSIGN = '+='
    M_ASSIGN ='-='
    LB_SHIFT_ASSIGN = '<<='
    RB_SHIFT_ASSIGN = '>>='
    BIT_AND_ASSIGN = '&='
    BIT_XOR_ASSIGN = '^='
    BIT_OR_ASSIGN = '|='

    //COMPARISON OPERATORS
    MEQ = '>='
    LEQ = '<='
    MT = '>'
    LT = '<'

    //EQUALITY OPERATORS
    EQ = '=='
    NEQ = '!='

    //ARITHMETIC OPERATORS
    INC = '++'
    DEC = '--'
    PLUS = '+'
    MINUS = '-'
    DIVIDE = '/'
    MODULOUS = '%'
    MUL = '*'

    //LOGICAL OPERATORS
    BIT_AND = '&&'
    BIT_OR = '||'
    BIT_NOT = '!'

    //BITWISE OPERATORS
    L_SHIFT = '<<'
    R_SHIFT = '>>'

    //UNARY OPERATORS
    UN_AND = '&'
    UN_OR = '|'
    UN_XOR = '^'
    UN_NOT ='~'

    //COMMENTS
    END_OF_LINE_COMMENT = '//'
    C_STYLE_BLOCK_COMMENT = 'regexp:/\*.*?\*/'
  ]
}

ACSScriptFile ::= FileContainer

private FileContainer ::= (END_OF_LINE_COMMENT | C_STYLE_BLOCK_COMMENT |Definition*)

Definition ::= (FunctionDefinition | ScriptDefinition | DirectivesDeclaration | GlobalVarStatement | SpecialDefinition | VariableDefinition)

/**
    Specials declaration
 */

SpecialDefinition ::= SPECIAL SpecialExpression SEMICOLON

SpecialExpression ::= (NUMBER COLON FunctionInvocation) (COMMA SpecialExpression)*

FunctionDefinition ::= FUNCTION FunctionReturnType FunctionName FunctionParameters FunctionBody

ScriptDefinition ::= SCRIPT ScriptName (ScriptPossibleParams | ScriptType) (NET ClientsideType | NET | ClientsideType)? ScriptBody

/**
    Directives statement
 */

DirectivesDeclaration ::= (IncludeDeclaration | ImportDeclaration | DefineDeclaration | LibraryDeclaration)

IncludeDeclaration ::= INCLUDE STRING

ImportDeclaration ::= IMPORT STRING

DefineDeclaration ::= DEFINE IDENTIFIER  DefineExpression

LibraryDeclaration ::= LIBRARY STRING

DefineExpression ::= DefineParenthesesExpression | DefineBinaryExpression | DefineLiteralExpression

DefineParenthesesExpression ::= LPAR DefineExpression RPAR

DefineBinaryExpression ::= DefineExpression Operator DefineExpression

DefineLiteralExpression ::= NUMBER | FLOAT | STRING | IDENTIFIER //VARIABLE NAME HERE???

/**
    Script statements
 */

ScriptType ::= OPEN | ENTER | RETURN | RESPAWN | DEATH | LIGHTNING | UNLOADING | DISCONNECT | KILL | REOPEN | PICKUP | REDRETURN | BLUERETURN | WHITERETURN

ScriptName ::= (STRING | NUMBER)

ScriptPossibleParams ::= LPAR (VOID | ScriptParameter) RPAR

ScriptParameter ::= ScriptParameterList

ScriptParameterList ::= ScriptFormalParameter (COMMA ScriptFormalParameter)*

ScriptFormalParameter ::= INT VariableName

ScriptBody ::= CodeBlock | Statement

/**
    Function statements
 */
FunctionInvocation ::= FunctionName (NormalFunctionInvocation | TypeCastFunctionInvocation | MixedCastFunctionInvocation)

NormalFunctionInvocation ::=  LPAR FunctionInvokeParameters* RPAR

TypeCastFunctionInvocation ::=  LPAR TypeCastFunctionInvokeParameters RPAR

MixedCastFunctionInvocation ::=  LPAR MixedCastFunctionInvokeParameters RPAR

TypeCastFunctionInvokeParameters ::= TypeCast COLON BinaryExpression (COMMA TypeCast COLON BinaryExpression)*

MixedCastFunctionInvokeParameters ::= TypeCast COLON BinaryExpression (COMMA TypeCast COLON BinaryExpression | SEMICOLON FunctionInvokeParameters)*
/**
    TypeCasts parameters. All type cast parameters are case-sensitive. E.g. parameter 'S' instead of 's' will not work
 */

//TODO ASK ABOUT TYPE CASTS AND IDENTIFIERS
TypeCast ::= TypeCastArray | TypeCastBinary | TypeCastCharacter | TypeCastDecimal
                | TypeCastFixedPointNumber | TypeCastKey | TypeCastLanguage | TypeCastName | TypeCastString | TypeCastHex

TypeCastArray ::= 'a'

TypeCastBinary ::= 'b'

TypeCastCharacter ::= 'c'

TypeCastDecimal ::= 'i' | 'd'

TypeCastFixedPointNumber ::= 'f'

TypeCastKey ::= 'k'

TypeCastLanguage ::= 'l'

TypeCastName ::= 'n'

TypeCastString ::= 's'

TypeCastHex ::= 'h'

FunctionInvokeParameters ::= BinaryExpression (COMMA BinaryExpression)*

FunctionReturnType ::= VOID | Type

FunctionName ::= IDENTIFIER
/*{
    mixin="by.home.acs.language.psi.impl.ACSFunctionElementImpl"
    implements="by.home.acs.language.psi.ACSFunctionElement"
    methods=[getName getNameIdentifier changeName getReference]
    stubClass="by.home.acs.language.stub.function.ACSFunctionStub"
}*/

FunctionParameters ::= LPAR FunctionParameter RPAR

FunctionParameter ::=  (VOID | FunctionParameterList)

FunctionParameterList ::= FunctionFormalParameter (COMMA FunctionFormalParameter)*

FunctionFormalParameter ::= Type VariableName

FunctionBody ::= LBRACE Statement* RBRACE

/**

 */

GlobalVarStatement ::= (GLOBAL | WORLD) Type NUMBER COLON IDENTIFIER SEMICOLON

ClientsideType ::= CLIENTSIDE

TerminateStatement ::= TERMINATE SEMICOLON

SuspendStatement ::= SUSPEND SEMICOLON

RestartStatement ::= RESTART SEMICOLON

Statement ::= (StatementWithoutSub | IncrementOrDecrementExpression SEMICOLON | VariableDefinition | AssignmentStatement | FunctionInvocation SEMICOLON | IfThenElseStatement | IfThenStatement | Loops | SwitchLoop)

StatementWithoutSub ::= (CodeBlock | BreakStatement | ContinueStatement | ReturnOperator | SuspendStatement | RestartStatement | TerminateStatement)

CodeBlock ::= LBRACE Statement* RBRACE

BinaryExpression ::= AssignmentExpression Operator AssignmentExpression

AssignmentExpression ::= (ParenthesisedExpression | BinaryExpression | FunctionInvocation | ArrayReferenceExpression | IncrementOrDecrementExpression | NegationExpression | LiteralExpression)

ArrayReferenceExpression ::= VariableName ArrayReference+

ArrayReference ::= LBRACKET (BinaryExpression) RBRACKET

IncrementOrDecrementExpression ::= LiteralExpression '++' | LiteralExpression '--' | '++' LiteralExpression | '--' LiteralExpression

NegationExpression ::= '!' LiteralExpression

AssignmentStatement ::= (ArrayReferenceExpression | VariableName) ASSIGN (FunctionInvocation SEMICOLON| VariableInitialization)

VariableDefinition ::= STATIC? Type RepeatableVariable ArrayType* (SEMICOLON | (ASSIGN VariableInitialization))

VariableName ::=  IDENTIFIER
        /*{
            implements="by.home.acs.language.psi.ACSVariableElement"
            mixin="by.home.acs.language.psi.impl.ACSVariableElementImpl"
            methods=[getName changeName getNameIdentifier getReference]
            stubClass="by.home.acs.language.stub.variable.ACSVariableStub"
        }*/

RepeatableVariable ::= VariableName (COMMA RepeatableVariable)*

VariableInitialization ::= (AssignmentExpression | SimpleInitialization) SEMICOLON

ParenthesisedExpression ::= LPAR AssignmentExpression RPAR

SimpleInitialization ::= AllTypes (COMMA RepeatableVariable ASSIGN AllTypes)*

LiteralExpression ::= (AllTypes | VariableName)

Operator ::= (EqualityOperator | AssignmentOperator | LogicalOperator | UnaryOperator  | BitwiseOperator | ComparisonOperator | ArithmeticOperator )

AssignmentOperator ::= ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' ) //MIGHT BE ERROR HERE BECAUSE OF ASSIGN. NEED A LOT OF TESTS

ComparisonOperator ::= ( '>=' | '<=' | '>' | '<' )

EqualityOperator ::= ( '==' | '!=')

ArithmeticOperator ::= ( '++' | '--' | '+' | '-' | '/' | '%' | '*' )

LogicalOperator ::= ( '&&' | '||' | '!' )

BitwiseOperator ::= ( '<<' | '>>' )

UnaryOperator ::= ('&' | '|' | '^' | '~')

Loops ::= forLoop | whileLoop | untilLoop | doWhileLoop | doUntilLoop

forLoop ::= FOR LPAR Initialization Condition Iteration RPAR Statement

private Initialization ::= EmptyInitialization | TypeInitialization

EmptyInitialization ::= SEMICOLON

TypeInitialization ::= STATIC? Type VariableList  ArithmeticInitialization* SEMICOLON

private VariableList ::= RepeatableVariable ASSIGN (NUMBER | STRING | VariableName ) (COMMA VariableList)?//check logical type

private ArithmeticInitialization ::= ArithmeticOperator (NUMBER | STRING | VariableName)

private Condition ::= (EmptyCondition | (NormalCondition SEMICOLON) | ArithmeticCondition)

private LogicalCondition ::= ComparisonOperator

private ComparisonCondition ::= (VariableName | NUMBER | STRING) LogicalCondition (VariableName ArithmeticInitialization*| NUMBER ArithmeticInitialization* | STRING ArithmeticInitialization*) (LogicalOperator ComparisonCondition)?

NormalCondition ::= ComparisonCondition (LogicalCondition ComparisonCondition)?

private ArithmeticCondition ::= NormalCondition SEMICOLON LogicalOperator

EmptyCondition ::= SEMICOLON

private Iteration ::=  NormalIteration | EmptyIteration

EmptyIteration ::= //not sure with this...

NormalIteration ::= VariableName (ArithmeticOperator | ArithmeticOperator VariableName | VariableName AssignmentOperator (NUMBER | STRING | VariableName)) (COMMA NormalIteration)?

whileLoop ::= WHILE LPAR AssignmentExpression RPAR Statement

untilLoop ::= UNTIL LPAR AssignmentExpression RPAR Statement

doWhileLoop ::= DO Statement WHILE LPAR AssignmentExpression RPAR SEMICOLON

doUntilLoop ::= DO Statement UNTIL LPAR AssignmentExpression RPAR SEMICOLON

Type ::= (INT | STR | BOOL)

private AllTypes ::= STRING | CHARACTER | NUMBER | FLOAT | EMPTY_STRING | ArrayInitializer

ArrayType ::=  LBRACKET NUMBER RBRACKET

ArrayInitializer ::= LBRACE ArrayInitializers* RBRACE (COMMA ArrayInitializer)?

ArrayInitializers ::= ArrayInitializer | (NUMBER | STRING) (COMMA ArrayInitializers)?

ReturnOperator ::= RETURN SEMICOLON | RETURN BinaryExpression SEMICOLON | RETURN VariableName SEMICOLON // Use something ELSE but IDENTIFIER later

/**
    Control Flow Statements
 */

IfThenStatement ::= IF LPAR AssignmentExpression RPAR (Statement | IfThenElseStatement)

IfThenElseStatement ::= IF LPAR AssignmentExpression RPAR Statement ELSE Statement

SwitchLoop ::= SWITCH LPAR (FunctionInvocation | VariableName | NUMBER) RPAR LBRACE CaseOperator* DefaultOnly? RBRACE

CaseOperator ::=   CaseIdentifier Statement*

private DefaultOnly ::= DEFAULT COLON Statement

private CaseIdentifier ::= CASE (VariableName | NUMBER | STRING) COLON

/**
    Loop Statements
 */

BreakStatement ::= BREAK SEMICOLON

ContinueStatement ::= CONTINUE SEMICOLON

